// This file was automatically generated by the pas2jni utility.
// Do not edit this file.
package pas;

import java.util.Date;
import java.util.TimeZone;

public class system {
  static private boolean _JniLibLoaded = false;
  public static void InitJni() {
    if (!_JniLibLoaded) {
      _JniLibLoaded=true;
      System.loadLibrary("personmodeljni");
    }
  }
  public native static long AllocMemory(int Size);

  public static class PascalObject {
    static { pas.system.InitJni(); }
    protected long _pasobj = 0;
    protected PascalObject() { }
    protected PascalObject(PascalObject obj) { if (obj != null) _pasobj=obj._pasobj; }
    protected PascalObject(long objptr) { _pasobj=objptr; }
    @Override protected void finalize() { }
    @Override public boolean equals(Object o) { return ((o instanceof PascalObject) && _pasobj == ((PascalObject)o)._pasobj); }
    @Override public int hashCode() { return (int)_pasobj; }
  }

  public static long Pointer(PascalObject obj) { return (obj == null) ? 0 : obj._pasobj; }

  public static class PascalObjectEx extends PascalObject {
    protected boolean _cleanup = false;
    @Override protected void finalize() { 
      if (_cleanup) __Release();
      super.finalize();
    }
    protected PascalObjectEx() { }
    protected PascalObjectEx(PascalObject obj) { super(obj); }
    protected PascalObjectEx(long objptr) { super(objptr); }
    public void __Release() { _pasobj = 0; }
  }

  native static long GetClassRef(int index);
  static TClass GetTClass(int index) { TClass c = new TClass(null); c._pasobj=GetClassRef(index); return c; }

  public static class Record extends PascalObjectEx {
    protected PascalObject _objref;
    @Override protected void finalize() { if (_pasobj < 0) { _pasobj=-_pasobj; _cleanup=true; } super.finalize(); }
    protected void __Init(long objptr, boolean cleanup) { _pasobj=objptr; _cleanup=cleanup; if (_pasobj==0 && __Size() != 0) _pasobj=AllocMemory(__Size()); }
    protected Record(PascalObject obj) { super(obj); _objref=obj; }
    protected Record(long objptr) { super(objptr); }
    protected final int __Size(int index) { return GetRecordSize(index); }
    public Record() { }
    public int __Size() { return 0; }
  }

  private native static int GetRecordSize(int index);

  public static class MethodPtr extends PascalObjectEx {
    private native void __Init(Object Obj, String MethodName, String MethodSignature, boolean IncRef);
    private native void __Destroy();
    protected Object mObject;
    protected String mName;
    protected String mSignature;
    protected void Init() { __Init(mObject, mName, mSignature, this != mObject); }
    protected MethodPtr() { _cleanup=true; _pasobj=-1; }
    public void __Release() { if (_pasobj > 0) __Destroy(); }
  }

  public static class Enum {
    public int Value;
    public int Ord() { return Value; }
    @Override public boolean equals(Object o) { return (o instanceof Integer) && Value == (Integer)o; }
    public boolean equals(int v) { return Value == v; }
    @Override public int hashCode() { return Value; }
  }

  private static abstract class BaseSet {
    protected int Value = 0;
    protected abstract byte Size();
    protected abstract int Base();
    protected abstract int ElMax();
    public BaseSet() { }
  }
  public static abstract class Set<TS extends BaseSet,TE extends Enum> extends BaseSet {
    protected int GetMask(TE Element) { return 1 << (Element.Ord() - Base()); }
    public Set() { }
    @SuppressWarnings({"unchecked", "varargs"})
    public Set(TE... Elements) { Include(Elements); }
    @SuppressWarnings({"unchecked", "varargs"})
    public Set(TS... Elements) { for (TS e : Elements) Include(e); }
    @SuppressWarnings({"unchecked", "varargs"})
    public void Include(TE... Elements) { for (TE e: Elements) Value = Value | GetMask(e); }
    public void Include(TS s) { Value=Value | s.Value; }
    @SuppressWarnings({"unchecked", "varargs"})
    public void Exclude(TE... Elements) { for (TE e: Elements) Value = Value & ~GetMask(e); }
    public void Exclude(TS s) { Value=Value & ~s.Value; }
    public void Assign(TS s) { Value=s.Value; }
    public void Intersect(TS s) { Value=Value & s.Value; }
    public boolean Has(TE Element) { return (Value & GetMask(Element)) != 0; }
    public boolean IsEmpty() { return Value == 0; }
    public boolean equals(TS s) { return Value == s.Value; }
    public boolean equals(TE Element) { return Value == Element.Ord(); }
    public boolean equals(int Element) { return Value == Element; }
  }

  public static class TDateTime {
    public static Date toDateUTC(double d) {
      return new Date(Math.round((d - 25569)*86400000.0));
    }
    public static Date toDate(double d) {
      long t = Math.round((d - 25569)*86400000.0); return new Date(t - TimeZone.getDefault().getOffset(t));
    }
    public static double getUTC(Date d) {
      return d.getTime()/86400000.0 + 25569;
    }
    public static double get(Date d) {
      return (d.getTime() + TimeZone.getDefault().getOffset(d.getTime()))/86400000.0 + 25569;
    }
  }

  private native static long InterfaceCast(long objptr, String objid);

  public static class PascalInterface extends PascalObjectEx {
    protected void __Init() { }
    public void __TypeCast(PascalObject obj, String intfId) {
      if (obj != null) {
        if (obj instanceof PascalInterface) {
          _pasobj=obj._pasobj;
          __Init();
        } else
          _pasobj=InterfaceCast(obj._pasobj, intfId);
      }
    }
    protected PascalInterface(long objptr, boolean cleanup) { _pasobj=objptr; __Init(); }
  }

  static { pas.system.InitJni(); }

  /* class TObject */
  public static class TObject extends PascalObject {
    public TObject(PascalObject obj) { super(obj); }
    public TObject(long objptr) { super(objptr); }
    // constructor Create: TObject
    public native static TObject Create();
    public static TObject Class() { return new TObject(system.GetClassRef(0)); }
    public static system.TClass TClass() { return system.GetTClass(0); }
    // destructor Destroy
    public native void Destroy();
    // procedure Free
    public native void Free();
    // function ClassType: TClass
    public native TClass ClassType();
    // function ClassName: shortstring
    public native String ClassName();
    // function ClassNameIs(const name: shortstring): Boolean
    public native boolean ClassNameIs(String name);
    // function ClassParent: TClass
    public native TClass ClassParent();
    // function InstanceSize: LongInt
    public native int InstanceSize();
    // function InheritsFrom(aclass: TClass): Boolean
    public native boolean InheritsFrom(TClass aclass);
  }

  /* class ref TClass */
  public static class TClass extends TObject {
    public TClass(PascalObject obj) { super(obj); }
  }

}
